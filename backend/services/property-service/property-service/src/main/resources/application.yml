# Enhanced Railway Configuration with Search Features
spring:
  application:
    name: property-service
  
  # Spring Boot Admin Client Configuration
  boot:
    admin:
      client:
        url: ${ADMIN_SERVER_URL:http://localhost:8090}
        username: ${ADMIN_USERNAME:admin}
        password: ${ADMIN_PASSWORD:admin123}
        instance:
          service-url: ${SERVICE_URL:http://localhost:8081}
          management-url: ${SERVICE_URL:http://localhost:8081}/actuator
          health-url: ${SERVICE_URL:http://localhost:8081}/actuator/health
          metadata:
            tags:
              environment: ${SPRING_PROFILES_ACTIVE:development}
              version: 1.0.0
              team: backend
  
  datasource:
    url: jdbc:postgresql://${PGHOST:localhost}:${PGPORT:5432}/${PGDATABASE:railway}
    username: ${PGUSER:postgres}
    password: ${PGPASSWORD:1234}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 300000
      max-lifetime: 900000
      connection-test-query: SELECT 1
      validation-timeout: 5000
      leak-detection-threshold: 60000
      # Enhanced pool settings for search workloads
      pool-name: PropertySearchPool
      register-mbeans: true
  
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc:
          time_zone: UTC
          batch_size: 25
          batch_versioned_data: true
        connection:
          handling_mode: delayed_acquisition_and_release_after_transaction
        temp:
          use_jdbc_metadata_defaults: false
        # Enhanced query performance
        order_inserts: true
        order_updates: true
        generate_statistics: false
        # Removed problematic JCache configuration
        # cache:
        #   use_second_level_cache: true
        #   use_query_cache: true
        #   region:
        #     factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
  
  # Enhanced cache configuration for search
  cache:
    type: simple
    cache-names:
      - properties
      - propertyList
      - propertiesByCity
      - nearbyProperties
      - searchResults
      - facets
      - suggestions
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=5m,recordStats
  
  # Railway-specific web configuration
  web:
    cors:
      allowed-origins: "*"
      allowed-methods: "*"
      allowed-headers: "*"
      max-age: 3600
  
  # Data configuration for pagination
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100
        one-indexed-parameters: false
      sort:
        sort-parameter: sortBy
        direction-parameter: sortDirection

server:
  port: ${PORT:8081}
  tomcat:
    max-threads: 50
    min-spare-threads: 5
    accept-count: 100
    connection-timeout: 20000
    # Enhanced for search workloads
    max-connections: 200
    max-http-post-size: 2MB
  address: 0.0.0.0
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript
    min-response-size: 1024
  http2:
    enabled: true
  forward-headers-strategy: native

management:
  endpoints:
    web:
      exposure:
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
        allowed-headers: "*"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
    caches:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${SPRING_PROFILES_ACTIVE:development}
    # Enhanced metrics for search performance
    distribution:
      percentiles-histogram:
        http.server.requests: true
        property.search.duration: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        property.search.duration: 0.5, 0.95, 0.99

# Custom search configuration
stayhub:
  search:
    default-page-size: 20
    max-page-size: 100
    max-radius: 100
    suggestion-limit: 10
    enable-full-text-search: true
    enable-geographic-search: true
    enable-faceted-search: true
    cache-timeout-minutes: 5
    # Performance tuning
    max-search-terms: 10
    min-search-length: 2
    max-amenities-filter: 20
    enable-query-optimization: true
    enable-search-analytics: true
  
  # Feature flags
  features:
    enable-advanced-sorting: true
    enable-popularity-scoring: true
    enable-availability-check: false # Would require booking service integration
    enable-price-predictions: false
    enable-ml-recommendations: false
    enable-autocomplete: true
    enable-search-suggestions: true
    enable-faceted-navigation: true
  
  # Performance settings
  performance:
    database:
      query-timeout: 30s
      slow-query-threshold: 1s
      enable-query-cache: true
      cache-size: 1000
    search:
      max-concurrent-searches: 100
      search-timeout: 10s
      enable-result-streaming: false
      batch-size: 50
  
  # External service URLs
  services:
    booking:
      url: ${BOOKING_SERVICE_URL:http://localhost:8082}
      timeout: 5s
      circuit-breaker:
        enabled: true
        failure-threshold: 5
        timeout: 30s
    user:
      url: ${USER_SERVICE_URL:http://localhost:8084}
      timeout: 3s
    analytics:
      url: ${ANALYTICS_SERVICE_URL:http://localhost:8085}
      timeout: 2s
      enabled: ${ENABLE_ANALYTICS:false}

logging:
  level:
    root: INFO
    com.stayhub: INFO
    org.springframework.boot: INFO
    org.springframework.web.cors: DEBUG
    org.springframework.data.jpa: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    com.zaxxer.hikari: WARN
    # Search-specific logging
    com.stayhub.property_service.service.PropertyService: DEBUG
    com.stayhub.property_service.specification: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/property-service.log
    max-size: 100MB
    max-history: 30

---
# Development profile
spring:
  config:
    activate:
      on-profile: development

stayhub:
  search:
    enable-full-text-search: true
    enable-search-analytics: true
    cache-timeout-minutes: 1 # Shorter cache for development
  performance:
    database:
      slow-query-threshold: 500ms
      enable-query-cache: false # Disable for development to see real performance

logging:
  level:
    com.stayhub: DEBUG
    org.springframework.data.jpa: DEBUG
    org.hibernate.SQL: DEBUG

---
# Production profile
spring:
  config:
    activate:
      on-profile: production,railway
  datasource:
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5

server:
  tomcat:
    max-threads: 100
    max-connections: 500

stayhub:
  search:
    enable-full-text-search: true
    enable-search-analytics: true
    cache-timeout-minutes: 10 # Longer cache for production
  performance:
    database:
      slow-query-threshold: 2s
      enable-query-cache: true
    search:
      max-concurrent-searches: 200
      enable-result-streaming: true

logging:
  level:
    root: WARN
    com.stayhub: INFO
    org.springframework.web.cors: INFO

---
# Testing profile
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop

stayhub:
  search:
    default-page-size: 5
    max-page-size: 20
    enable-search-analytics: false
    cache-timeout-minutes: 0 # No cache for testing

logging:
  level:
    com.stayhub: DEBUG